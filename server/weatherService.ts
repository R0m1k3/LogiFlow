import { WeatherData, WeatherSettings, InsertWeatherData } from "../shared/schema.js";

export interface WeatherApiResponse {
  days: Array<{
    datetime: string;
    tempmax: number;
    tempmin: number;
    icon: string;
    conditions: string;
  }>;
}

export interface WeatherDisplayData {
  currentYear: WeatherData | null;
  previousYear: WeatherData | null;
}

export class WeatherService {
  private baseUrl = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline";

  /**
   * R√©cup√®re les donn√©es m√©t√©o actuelles depuis l'API Visual Crossing
   */
  async fetchCurrentWeather(settings: WeatherSettings): Promise<WeatherApiResponse | null> {
    try {
      const url = `${this.baseUrl}/${encodeURIComponent(settings.location)}?unitGroup=metric&include=days&key=${settings.apiKey}&contentType=json&lang=fr`;
      
      const response = await fetch(url);
      if (!response.ok) {
        console.error(`Weather API error: ${response.status} ${response.statusText}`);
        return null;
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration de la m√©t√©o actuelle:", error);
      return null;
    }
  }

  /**
   * R√©cup√®re les donn√©es m√©t√©o de l'ann√©e pr√©c√©dente pour la m√™me date
   */
  async fetchPreviousYearWeather(settings: WeatherSettings, targetDate: string): Promise<WeatherApiResponse | null> {
    try {
      // Pour les donn√©es historiques, Visual Crossing utilise la syntaxe: /timeline/location/date
      const url = `${this.baseUrl}/${encodeURIComponent(settings.location)}/${targetDate}?unitGroup=metric&include=days&key=${settings.apiKey}&contentType=json&lang=fr`;
      
      console.log(`üå§Ô∏è [FETCH-HISTORY] Requesting: ${settings.location} for ${targetDate}`);
      
      const response = await fetch(url);
      if (!response.ok) {
        console.error(`üå§Ô∏è [ERROR] Weather API error for previous year: ${response.status} ${response.statusText}`);
        
        // Pour les donn√©es historiques, certains comptes peuvent ne pas avoir acc√®s
        if (response.status === 401) {
          console.warn(`‚ö†Ô∏è [WARNING] Historical data access may not be available with current API key`);
        }
        return null;
      }

      const data = await response.json();
      console.log(`‚úÖ [FETCH-HISTORY] Successfully retrieved data for ${targetDate}`);
      return data;
    } catch (error) {
      console.error("üå§Ô∏è [ERROR] Erreur lors de la r√©cup√©ration de la m√©t√©o de l'ann√©e pr√©c√©dente:", error);
      return null;
    }
  }

  /**
   * Convertit les donn√©es de l'API en format WeatherData
   */
  convertApiDataToWeatherData(apiData: WeatherApiResponse, location: string, isCurrentYear: boolean): InsertWeatherData | null {
    if (!apiData.days || apiData.days.length === 0) {
      return null;
    }

    const todayData = apiData.days[0];
    
    return {
      // Pas d'ID - sera auto-g√©n√©r√© par PostgreSQL serial
      date: todayData.datetime,
      location,
      tempMax: todayData.tempmax.toString(),
      tempMin: todayData.tempmin.toString(),
      icon: todayData.icon,
      conditions: todayData.conditions,
      isCurrentYear
      // Pas de createdAt/updatedAt - g√©r√©s par la base de donn√©es
    };
  }

  /**
   * Calcule la date de l'ann√©e pr√©c√©dente pour la m√™me date
   */
  getPreviousYearDate(date: Date = new Date()): string {
    const previousYear = new Date(date);
    previousYear.setFullYear(date.getFullYear() - 1);
    return previousYear.toISOString().split('T')[0]; // Format YYYY-MM-DD
  }

  /**
   * Convertit l'ic√¥ne m√©t√©o en format d'affichage
   */
  getWeatherIcon(iconCode: string): string {
    const iconMap: { [key: string]: string } = {
      'clear-day': '‚òÄÔ∏è',
      'clear-night': 'üåô',
      'partly-cloudy-day': '‚õÖ',
      'partly-cloudy-night': '‚òÅÔ∏è',
      'cloudy': '‚òÅÔ∏è',
      'rain': 'üåßÔ∏è',
      'snow': '‚ùÑÔ∏è',
      'wind': 'üí®',
      'fog': 'üå´Ô∏è',
      'thunder': '‚õàÔ∏è',
      'hail': 'üå®Ô∏è'
    };

    return iconMap[iconCode] || 'üå§Ô∏è';
  }

  /**
   * Valide les param√®tres de configuration m√©t√©o
   */
  validateWeatherSettings(settings: Partial<WeatherSettings>): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!settings.apiKey || settings.apiKey.trim().length === 0) {
      errors.push("La cl√© API Visual Crossing est requise");
    }

    if (!settings.location || settings.location.trim().length === 0) {
      errors.push("La localisation est requise");
    }

    // V√©rification basique du format de la cl√© API Visual Crossing
    if (settings.apiKey && settings.apiKey.length < 10) {
      errors.push("La cl√© API semble invalide (trop courte)");
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Test de connexion √† l'API m√©t√©o
   */
  async testApiConnection(apiKey: string, location: string): Promise<{ success: boolean; message: string }> {
    try {
      const testUrl = `${this.baseUrl}/${encodeURIComponent(location)}?unitGroup=metric&include=days&key=${apiKey}&contentType=json`;
      
      const response = await fetch(testUrl);
      
      if (response.ok) {
        const data = await response.json();
        if (data.days && data.days.length > 0) {
          return { success: true, message: "Connexion r√©ussie √† l'API m√©t√©o" };
        } else {
          return { success: false, message: "Aucune donn√©e m√©t√©o trouv√©e pour cette localisation" };
        }
      } else if (response.status === 401) {
        return { success: false, message: "Cl√© API invalide" };
      } else if (response.status === 404) {
        return { success: false, message: "Localisation introuvable" };
      } else {
        return { success: false, message: `Erreur API: ${response.status} ${response.statusText}` };
      }
    } catch (error) {
      console.error("Erreur test API m√©t√©o:", error);
      return { success: false, message: "Erreur de connexion √† l'API m√©t√©o" };
    }
  }
}

export const weatherService = new WeatherService();