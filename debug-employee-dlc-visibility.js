#!/usr/bin/env node

/**
 * Debug final pour v√©rifier pourquoi les DLC cr√©√©es par l'employ√© n'apparaissent pas
 */

console.log('üîç Debug Final - Visibilit√© DLC Employ√©');

async function debugDlcVisibility() {
  try {
    const fetch = require('node-fetch');
    
    console.log('\n=== DEBUG VISIBILIT√â DLC EMPLOY√â ===');
    
    // 1. Login admin pour test de contr√¥le
    console.log('1. Test admin...');
    const adminLogin = await fetch('http://localhost:5000/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username: 'admin', password: 'admin' })
    });
    
    if (!adminLogin.ok) {
      console.log('‚ùå Admin login failed');
      return;
    }
    
    const adminCookies = adminLogin.headers.get('set-cookie');
    
    // 2. Cr√©er une DLC avec admin
    console.log('2. Cr√©ation DLC par admin...');
    const dlcData = {
      productName: 'Test DLC Visibilit√© Admin',
      dlcDate: '2025-08-20',
      dateType: 'DLC',
      quantity: 1,
      unit: 'Unit√©',
      supplierId: 1,
      location: 'Test Rayon',
      groupId: 2, // Groupe Houdemont (m√™me que l'employ√©)
      status: 'en_cours'
    };
    
    const createDlc = await fetch('http://localhost:5000/api/dlc-products', {
      method: 'POST',
      headers: {
        'Cookie': adminCookies,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(dlcData)
    });
    
    console.log('Status cr√©ation:', createDlc.status);
    
    if (createDlc.ok) {
      const newDlc = await createDlc.json();
      console.log('‚úÖ DLC cr√©√©e:', {
        id: newDlc.id,
        productName: newDlc.productName,
        groupId: newDlc.groupId
      });
    }
    
    // 3. V√©rifier la liste compl√®te DLC
    console.log('\n3. V√©rification liste DLC...');
    const dlcList = await fetch('http://localhost:5000/api/dlc-products', {
      headers: { 'Cookie': adminCookies }
    });
    
    if (dlcList.ok) {
      const dlcs = await dlcList.json();
      console.log('üìã Total DLC:', dlcs.length);
      
      // Filtrer par groupe 2 (Houdemont)
      const group2Dlcs = dlcs.filter(d => d.groupId === 2);
      console.log('üè™ DLC Groupe 2 (Houdemont):', group2Dlcs.length);
      
      // Derni√®res DLC cr√©√©es
      const recentDlcs = dlcs.slice(0, 5);
      console.log('üÜï 5 derni√®res DLC:');
      recentDlcs.forEach(dlc => {
        console.log(`  - ID: ${dlc.id}, Nom: ${dlc.productName}, Groupe: ${dlc.groupId}`);
      });
    }
    
    console.log('\n4. Instructions pour test employ√© production:');
    console.log('- Se connecter avec compte employ√©');
    console.log('- Aller sur page DLC Products');
    console.log('- V√©rifier si les DLC du groupe 2 sont visibles');
    console.log('- Regarder dans les outils dev si la requ√™te API retourne des donn√©es');
    console.log('- V√©rifier le cache React Query dans les dev tools');
    
    console.log('\nüîç Points √† v√©rifier:');
    console.log('1. Cache React Query invalid√© apr√®s cr√©ation ?');
    console.log('2. Filtre groupId correct dans la requ√™te ?');
    console.log('3. √âtat de loading/error du composant ?');
    console.log('4. Donn√©es re√ßues mais pas affich√©es ?');
    
  } catch (error) {
    console.log('‚ùå Erreur debug:', error.message);
  }
}

debugDlcVisibility();