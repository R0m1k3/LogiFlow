#!/bin/bash
# Script de v√©rification du syst√®me de sauvegarde automatique
# Usage: ./scripts/verify-backup-system.sh

set -e

echo "üîç V√âRIFICATION DU SYST√àME DE SAUVEGARDE AUTOMATIQUE"
echo "=================================================="

# 1. V√©rifier que les containers sont en cours d'ex√©cution
echo "1. V√©rification des containers Docker..."
if docker-compose ps | grep -q "logiflow.*Up"; then
    echo "‚úÖ Container LogiFlow en cours d'ex√©cution"
else
    echo "‚ùå Container LogiFlow non disponible"
    exit 1
fi

if docker-compose ps | grep -q "logiflow-db.*Up"; then
    echo "‚úÖ Container PostgreSQL en cours d'ex√©cution"
else
    echo "‚ùå Container PostgreSQL non disponible"
    exit 1
fi

# 2. V√©rifier la connectivit√© √† la base de donn√©es
echo ""
echo "2. V√©rification de la connectivit√© √† la base de donn√©es..."
if docker-compose exec logiflow-db pg_isready -U logiflow_admin -d logiflow_db > /dev/null 2>&1; then
    echo "‚úÖ Base de donn√©es accessible"
else
    echo "‚ùå Base de donn√©es non accessible"
    exit 1
fi

# 3. V√©rifier la pr√©sence de pg_dump dans le container
echo ""
echo "3. V√©rification de pg_dump..."
if docker-compose exec logiflow which pg_dump > /dev/null 2>&1; then
    echo "‚úÖ pg_dump disponible"
    docker-compose exec logiflow pg_dump --version
else
    echo "‚ùå pg_dump non disponible"
    exit 1
fi

# 4. V√©rifier le r√©pertoire de sauvegarde
echo ""
echo "4. V√©rification du r√©pertoire de sauvegarde..."
if docker-compose exec logiflow ls -la /app/backups > /dev/null 2>&1; then
    echo "‚úÖ R√©pertoire /app/backups accessible"
    echo "Contenu du r√©pertoire de sauvegarde :"
    docker-compose exec logiflow ls -la /app/backups
else
    echo "‚ùå R√©pertoire de sauvegarde non accessible"
    exit 1
fi

# 5. V√©rifier la table database_backups
echo ""
echo "5. V√©rification de la table database_backups..."
if docker-compose exec logiflow-db psql -U logiflow_admin -d logiflow_db -c "SELECT COUNT(*) FROM database_backups;" > /dev/null 2>&1; then
    echo "‚úÖ Table database_backups accessible"
    echo "Sauvegardes enregistr√©es :"
    docker-compose exec logiflow-db psql -U logiflow_admin -d logiflow_db -c "SELECT filename, created_at, backup_type, status FROM database_backups ORDER BY created_at DESC LIMIT 5;" 2>/dev/null || echo "Aucune sauvegarde trouv√©e"
else
    echo "‚ùå Table database_backups non accessible"
    exit 1
fi

# 6. V√©rifier les logs du service de sauvegarde
echo ""
echo "6. V√©rification des logs du service de sauvegarde..."
echo "Recherche du message d'initialisation du service de sauvegarde :"
if docker-compose logs logiflow | grep -q "Backup service initialized for automatic daily backups"; then
    echo "‚úÖ Service de sauvegarde initialis√©"
else
    echo "‚ö†Ô∏è Message d'initialisation non trouv√© dans les logs r√©cents"
fi

if docker-compose logs logiflow | grep -q "Automatic backup scheduled"; then
    echo "‚úÖ Planification automatique configur√©e"
else
    echo "‚ö†Ô∏è Message de planification non trouv√© dans les logs r√©cents"
fi

echo ""
echo "7. Test de cr√©ation d'une sauvegarde manuelle..."
echo "Pour tester une sauvegarde manuelle, connectez-vous √† l'application et utilisez l'API :"
echo "curl -X POST http://localhost:3000/api/backups -H 'Content-Type: application/json' -d '{\"type\": \"manual\"}'"

echo ""
echo "üéâ V√âRIFICATION TERMIN√âE"
echo "========================"
echo ""
echo "üí° INFORMATIONS IMPORTANTES :"
echo "- Les sauvegardes automatiques sont programm√©es quotidiennement √† 2h00"
echo "- Les sauvegardes sont stock√©es dans le volume Docker 'backup_data'"
echo "- Maximum 10 sauvegardes conserv√©es (les plus anciennes sont supprim√©es automatiquement)"
echo "- Les sauvegardes sont √©galement enregistr√©es en base dans la table 'database_backups'"
echo ""
echo "üîß EN CAS DE PROBL√àME :"
echo "- Red√©marrez les containers : docker-compose restart"
echo "- V√©rifiez les logs : docker-compose logs logiflow"
echo "- V√©rifiez les variables d'environnement : docker-compose config"