#!/bin/bash
# Script de migration automatique - Production
# Cr√©e la table announcements et ajoute les champs DLC stock √©puis√©

set -e

echo "üîÑ [AUTO-MIGRATE] D√©but des migrations automatiques..."

# Construire DATABASE_URL si n√©cessaire
if [ -z "$DATABASE_URL" ]; then
    if [ -n "$POSTGRES_USER" ] && [ -n "$POSTGRES_PASSWORD" ] && [ -n "$POSTGRES_DB" ]; then
        export DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@logiflow-db:5432/${POSTGRES_DB}"
        echo "üîß [AUTO-MIGRATE] URL de base de donn√©es construite"
    else
        echo "‚ùå [AUTO-MIGRATE] Variables de base de donn√©es manquantes"
        exit 1
    fi
fi

# V√©rifier si la base de donn√©es est accessible
echo "üîó [AUTO-MIGRATE] Test de connexion √† la base de donn√©es..."
if ! psql "$DATABASE_URL" -c "SELECT 1;" > /dev/null 2>&1; then
    echo "‚ùå [AUTO-MIGRATE] Impossible de se connecter √† la base de donn√©es"
    exit 1
fi

echo "‚úÖ [AUTO-MIGRATE] Connexion √† la base de donn√©es r√©ussie"

# V√©rifier si la table announcements existe
if psql "$DATABASE_URL" -tAc "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema='public' AND table_name='announcements');" | grep -q "f"; then
    echo "üîß [AUTO-MIGRATE] Cr√©ation de la table announcements..."
    psql "$DATABASE_URL" << 'EOF'
CREATE TABLE announcements (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  priority VARCHAR(20) NOT NULL DEFAULT 'normal',
  author_id VARCHAR(255) NOT NULL,
  group_id INTEGER,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT announcements_priority_check CHECK (priority IN ('normal', 'important', 'urgent')),
  CONSTRAINT announcements_author_id_fkey FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE CASCADE,
  CONSTRAINT announcements_group_id_fkey FOREIGN KEY (group_id) REFERENCES groups(id) ON DELETE CASCADE
);

CREATE INDEX idx_announcements_priority ON announcements(priority);
CREATE INDEX idx_announcements_created_at ON announcements(created_at DESC);
CREATE INDEX idx_announcements_author_id ON announcements(author_id);
CREATE INDEX idx_announcements_group_id ON announcements(group_id);
EOF
    echo "‚úÖ [AUTO-MIGRATE] Table announcements cr√©√©e avec succ√®s"
else
    echo "‚ÑπÔ∏è [AUTO-MIGRATE] Table announcements existe d√©j√† - aucune action n√©cessaire"
fi

# V√©rifier et ajouter les colonnes DLC stock √©puis√©
echo "üîÑ [AUTO-MIGRATE] V√©rification des colonnes DLC stock √©puis√©..."

if psql "$DATABASE_URL" -tAc "SELECT EXISTS (SELECT FROM information_schema.columns WHERE table_name='dlc_products' AND column_name='stock_epuise');" | grep -q "f"; then
    echo "üîß [AUTO-MIGRATE] Ajout des colonnes stock √©puis√© √† dlc_products..."
    psql "$DATABASE_URL" << 'EOF'
-- Migration s√©curis√©e pour ajouter les champs stock √©puis√©
ALTER TABLE dlc_products 
ADD COLUMN IF NOT EXISTS stock_epuise boolean DEFAULT false NOT NULL,
ADD COLUMN IF NOT EXISTS stock_epuise_by varchar(255),
ADD COLUMN IF NOT EXISTS stock_epuise_at timestamp;

-- Commentaires pour documenter les nouveaux champs
COMMENT ON COLUMN dlc_products.stock_epuise IS 'Indique si le produit est marqu√© comme stock √©puis√© (diff√©rent de p√©rim√©)';
COMMENT ON COLUMN dlc_products.stock_epuise_by IS 'ID de l''utilisateur qui a marqu√© le produit comme stock √©puis√©';
COMMENT ON COLUMN dlc_products.stock_epuise_at IS 'Date et heure de marquage du stock √©puis√©';

-- Index pour am√©liorer les performances sur les requ√™tes de stock √©puis√©
CREATE INDEX IF NOT EXISTS idx_dlc_products_stock_epuise ON dlc_products(stock_epuise);
EOF
    echo "‚úÖ [AUTO-MIGRATE] Colonnes stock √©puis√© ajout√©es avec succ√®s"
else
    echo "‚ÑπÔ∏è [AUTO-MIGRATE] Colonnes stock √©puis√© existent d√©j√†"
fi

echo "‚úÖ [AUTO-MIGRATE] Migration termin√©e!"