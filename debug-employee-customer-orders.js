#!/usr/bin/env node

/**
 * Script de diagnostic pour le probl√®me de cr√©ation de commandes client 
 * avec le r√¥le employ√© en production
 */

const fetch = require('node-fetch');

// Configuration de votre serveur de production
const PRODUCTION_URL = process.env.PRODUCTION_URL || 'https://votre-serveur-production.com';
const EMPLOYEE_USERNAME = process.env.EMPLOYEE_USERNAME || 'votre-employee-username';
const EMPLOYEE_PASSWORD = process.env.EMPLOYEE_PASSWORD || 'votre-employee-password';

async function testEmployeeCustomerOrders() {
  console.log('üîç Test de diagnostic des commandes client pour employ√©');
  console.log('URL de production:', PRODUCTION_URL);

  try {
    // 1. Test d'authentification employ√©
    console.log('\n1. Test d\'authentification employ√©...');
    const loginResponse = await fetch(`${PRODUCTION_URL}/api/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username: EMPLOYEE_USERNAME,
        password: EMPLOYEE_PASSWORD
      })
    });

    if (!loginResponse.ok) {
      console.error('‚ùå √âchec de l\'authentification employ√©:', loginResponse.status);
      return;
    }

    const cookies = loginResponse.headers.get('set-cookie');
    console.log('‚úÖ Authentification employ√© r√©ussie');

    // 2. V√©rifier le profil utilisateur
    console.log('\n2. V√©rification du profil employ√©...');
    const userResponse = await fetch(`${PRODUCTION_URL}/api/user`, {
      headers: {
        'Cookie': cookies
      }
    });

    if (!userResponse.ok) {
      console.error('‚ùå Impossible de r√©cup√©rer le profil employ√©:', userResponse.status);
      return;
    }

    const user = await userResponse.json();
    console.log('‚úÖ Profil employ√©:', {
      role: user.role,
      id: user.id,
      groupsCount: user.userGroups?.length || 0,
      groups: user.userGroups?.map(ug => ug.group?.name || ug.groupId) || []
    });

    if (user.role !== 'employee') {
      console.error('‚ùå L\'utilisateur n\'est pas un employ√©, r√¥le actuel:', user.role);
      return;
    }

    // 3. Test de r√©cup√©ration des commandes client (GET)
    console.log('\n3. Test API GET /api/customer-orders...');
    const getOrdersResponse = await fetch(`${PRODUCTION_URL}/api/customer-orders`, {
      headers: {
        'Cookie': cookies
      }
    });

    console.log('Status GET customer-orders:', getOrdersResponse.status);
    if (getOrdersResponse.ok) {
      const orders = await getOrdersResponse.json();
      console.log('‚úÖ API GET customer-orders fonctionne, nombre:', orders.length);
    } else {
      const errorText = await getOrdersResponse.text();
      console.error('‚ùå Erreur API GET customer-orders:', errorText);
    }

    // 4. Test de cr√©ation d'une commande client (POST)
    console.log('\n4. Test API POST /api/customer-orders...');
    
    // Utiliser le premier groupe de l'employ√©
    const groupId = user.userGroups?.[0]?.groupId;
    if (!groupId) {
      console.error('‚ùå Employ√© n\'est assign√© √† aucun groupe');
      return;
    }

    const testOrder = {
      customerName: 'Test Client Diagnostic',
      contactNumber: '0123456789',
      productName: 'Test Produit',
      productDescription: 'Description test',
      quantity: 1,
      groupId: groupId,
      isPickup: false,
      notes: 'Commande test pour diagnostic'
    };

    console.log('üì¶ Donn√©es de test:', testOrder);

    const createOrderResponse = await fetch(`${PRODUCTION_URL}/api/customer-orders`, {
      method: 'POST',
      headers: {
        'Cookie': cookies,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testOrder)
    });

    console.log('Status POST customer-orders:', createOrderResponse.status);
    
    if (createOrderResponse.ok) {
      const createdOrder = await createOrderResponse.json();
      console.log('‚úÖ Commande client cr√©√©e avec succ√®s:', {
        id: createdOrder.id,
        customerName: createdOrder.customerName,
        status: createdOrder.status
      });

      // 5. Nettoyer - supprimer la commande test (si l'employ√© a permission)
      console.log('\n5. Test de suppression de la commande test...');
      const deleteResponse = await fetch(`${PRODUCTION_URL}/api/customer-orders/${createdOrder.id}`, {
        method: 'DELETE',
        headers: {
          'Cookie': cookies
        }
      });

      if (deleteResponse.ok) {
        console.log('‚úÖ Commande test supprim√©e');
      } else {
        console.log('‚ÑπÔ∏è Commande test conserv√©e (employ√© n\'a pas permission de supprimer)');
      }
    } else {
      const errorText = await createOrderResponse.text();
      console.error('‚ùå Erreur API POST customer-orders:', errorText);
      
      // Analyser les erreurs courantes
      if (createOrderResponse.status === 403) {
        console.log('üí° Probl√®me de permissions - v√©rifiez le syst√®me de permissions c√¥t√© serveur');
      } else if (createOrderResponse.status === 400) {
        console.log('üí° Probl√®me de validation - v√©rifiez les donn√©es envoy√©es');
      } else if (createOrderResponse.status === 500) {
        console.log('üí° Erreur serveur - v√©rifiez les logs serveur');
      }
    }

    // 6. Test des permissions sp√©cifiques
    console.log('\n6. Test des permissions employ√©...');
    console.log('Permissions attendues pour customer-orders:');
    console.log('- view: ‚úÖ (employ√© doit pouvoir voir)');
    console.log('- create: ‚úÖ (employ√© doit pouvoir cr√©er)');
    console.log('- edit: ‚ùå (employ√© ne doit pas pouvoir modifier)');
    console.log('- delete: ‚ùå (employ√© ne doit pas pouvoir supprimer)');

  } catch (error) {
    console.error('‚ùå Erreur de diagnostic:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° Solution: V√©rifiez que le serveur est d√©marr√© et accessible');
    } else if (error.code === 'ETIMEDOUT') {
      console.log('üí° Solution: Probl√®me de timeout r√©seau');
    } else if (error.message.includes('ENOTFOUND')) {
      console.log('üí° Solution: URL du serveur incorrecte');
    }
  }
}

// Instructions d'utilisation
console.log(`
üöÄ INSTRUCTIONS D'UTILISATION:

1. Configurez les variables d'environnement:
   export PRODUCTION_URL="https://votre-serveur-production.com"
   export EMPLOYEE_USERNAME="votre-employee-username"
   export EMPLOYEE_PASSWORD="votre-employee-password"

2. Ex√©cutez le script:
   node debug-employee-customer-orders.js --run

3. Analysez les r√©sultats pour identifier le probl√®me
`);

if (process.argv.includes('--run')) {
  testEmployeeCustomerOrders();
}